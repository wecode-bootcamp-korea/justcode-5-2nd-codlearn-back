
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.0.0
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "4.0.0",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  img: 'img',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  depth: 'depth',
  parent_id: 'parent_id'
});

exports.Prisma.Class_imgScalarFieldEnum = makeEnum({
  id: 'id',
  url: 'url',
  class_id: 'class_id'
});

exports.Prisma.ClassesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  instructor_id: 'instructor_id',
  price: 'price',
  img: 'img',
  rate: 'rate',
  description: 'description',
  students: 'students',
  sessions: 'sessions',
  price_scope: 'price_scope',
  category1_id: 'category1_id',
  category2_id: 'category2_id',
  category3_id: 'category3_id',
  level_id: 'level_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ContentsScalarFieldEnum = makeEnum({
  id: 'id',
  class_id: 'class_id',
  content: 'content'
});

exports.Prisma.InstructorScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.LevelScalarFieldEnum = makeEnum({
  id: 'id',
  level: 'level'
});

exports.Prisma.My_classesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  class_id: 'class_id',
  progress: 'progress'
});

exports.Prisma.Price_scopeScalarFieldEnum = makeEnum({
  id: 'id',
  scope: 'scope'
});

exports.Prisma.ReviewScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  rate: 'rate',
  class_id: 'class_id'
});

exports.Prisma.WishlistScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  class_id: 'class_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  users: 'users',
  category: 'category',
  class_img: 'class_img',
  classes: 'classes',
  contents: 'contents',
  instructor: 'instructor',
  level: 'level',
  my_classes: 'my_classes',
  price_scope: 'price_scope',
  review: 'review',
  wishlist: 'wishlist'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
